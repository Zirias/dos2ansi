#!/bin/sh

if [ $(id -u) -eq 0 ]; then
    echo >&2 showansi will not run as root.
    exit 1
fi

is_integer()
{
    case "${1#[+-]}" in
	*[!0123456789]*)    return 1;;
	'')		    return 1;;
	*)		    return 0;;
    esac
}

version()
{
    echo
    echo "This is showansi from dos2ansi v%%VERSION%%"
    echo
}

usage()
{
    echo "Usage: showansi -H"
    echo "       showansi -V"
    echo "       showansi [-ens] [-d dos2ansi] [-h height] [-w width]"
    echo "                [-- [args ...]] file"
}

err()
{
    usage >&2
    if [ -n "$1" ]; then
	echo >&2
	echo >&2 Error: $1
    fi
    exit 1
}

help()
{
    usage
    echo
    echo "         -H            Print this help and exit"
    echo "         -V            Print version information and exit"
    echo "         -d dos2ansi   Run 'dos2ansi' instead of %%DOS2ANSI%%"
    echo "         -e            Use an EGA font by default instead of VGA"
    echo "         -h height     Default height instead of 25"
    echo "         -n            Disable letter spacing by default"
    echo "         -s            Assume square pixels by default"
    echo "         -w width      Default width instead of 80"
    echo
    echo "         args          Extra arguments for dos2ansi"
    echo "                       Run 'dos2ansi -h' for help"
    echo "         file          MS-DOS/ANSI.SYS file to display"
    echo
}

fetcharg()
{
    case "${_needarg}" in
	d*) _dos2ansi="${1}"; _needarg="${_needarg#d}";;
	h*) is_integer "${1}" || err "Invalid height"
	    _def_height="${1}"; _needarg="${_needarg#h}";;
	w*) is_integer "${1}" || err "Invalid width"
	    _def_width="${1}"; _needarg="${_needarg#w}";;
	*)  err "Unknown flag"
    esac
}

_dos2ansi="%%DOS2ANSI%%"
_d2a_args=""
_def_width=80
_def_height=25
_def_spacing=1
_def_aspect=0
_def_fontbase=vga
_needarg=""

while true; do
    case "${1}" in
	--) shift; break;;
	-*) _flags="${1#-}"
	    while true; do
		case "${_flags}" in
		    H*) help; exit 0;;
		    V*) version; exit 0;;
		    d*) _needarg="${_needarg}d"; _flags="${_flags#d}";;
		    e*) _def_fontbase=ega; _flags="${_flags#e}";;
		    h*) _needarg="${_needarg}h"; _flags="${_flags#h}";;
		    n*) _def_spacing=0; _flags="${_flags#n}";;
		    s*) _def_aspect=1; _flags="${_flags#s}";;
		    w*) _needarg="${_needarg}w"; _flags="${_flags#w}";;
		    '')	break;;
		    *) fetcharg "${_flags}"; break;;
		esac
	    done
	    shift;;
	*)  test -z "${_needarg}" && break
	    fetcharg "${1}"
	    shift;;
    esac
done
test -z "${1}" && err "No file to display"
while true; do
    if [ -z "${2}" ]; then _file="${1}"; break
    else
	if [ -n "${_needarg}" ]; then fetcharg "${1}"
	else _d2a_args="${_d2a_args} \"${1}\""; fi
	shift
    fi
done
test -n "${_needarg}" && err "Missing arguments for given flags"

# default configuration
TERMINAL=xterm
TERM_ARGS="-tn xterm-256color -fa \"\" -bg black -fg lightgray"
D2A_ARGS=-X
MAXWIDTH=200
MAXHEIGHT=60
PAGER="less -~QRcPs"
ADDLINES=1
SETTITLE=-title
SETGEOM=-geometry
SETFONT=-fn
EXECUTE=-e
FONT_VGA9X16=-ibm-vga-normal-r-normal--16-120-96-96-c-90-iso10646-1
FONT_VGA8X16=-ibm-vga-normal-r-normal--16-120-96-96-c-80-iso10646-1
FONT_VGA9X8=-ibm-vga-normal-r-expanded--16-120-96-96-c-180-iso10646-1
FONT_VGA8X8=-ibm-vga-normal-r-expanded--16-120-96-96-c-160-iso10646-1
FONT_EGA9X14=-ibm-ega-normal-r-normal--14-100-96-96-c-90-iso10646-1
FONT_EGA8X14=-ibm-ega-normal-r-normal--14-100-96-96-c-80-iso10646-1
FONT_EGA9X8=-ibm-ega-normal-r-expanded--14-100-96-96-c-180-iso10646-1
FONT_EGA8X8=-ibm-ega-normal-r-expanded--14-100-96-96-c-160-iso10646-1
FONT_AC_VGA9X16=-ibm-vga-normal-r-normal--16-120-96-96-c-90-iso10646-1
FONT_AC_VGA8X16=-ibm-vga-normal-r-normal--16-120-96-96-c-80-iso10646-1
FONT_AC_VGA9X8=-ibm-vga-normal-r-expanded--16-120-96-96-c-180-iso10646-1
FONT_AC_VGA8X8=-ibm-vga-normal-r-expanded--16-120-96-96-c-160-iso10646-1
FONT_AC_EGA9X14=-ibm-ega-normal-r-normal--14-100-96-96-c-90-iso10646-1
FONT_AC_EGA8X14=-ibm-ega-normal-r-normal--14-100-96-96-c-80-iso10646-1
FONT_AC_EGA9X8=-ibm-ega-normal-r-expanded--14-100-96-96-c-180-iso10646-1
FONT_AC_EGA8X8=-ibm-ega-normal-r-expanded--14-100-96-96-c-160-iso10646-1
USERRC=

# read system-wide configuration
test -r "%%SYSCONFDIR%%/showansirc" && . "%%SYSCONFDIR%%/showansirc"

# read per-user configuration (if enabled in system-wide configuration)
test -n "${USERRC}" && test -r "${USERRC}" && . "${USERRC}"

# sanitize numeric values
is_integer "${MAXWIDTH}"    || MAXWIDTH=200
is_integer "${MAXHEIGHT}"   || MAXHEIGHT=60
is_integer "${ADDLINES}"    || ADDLINES=1

# create "mapping table" to map SAUCE metadata to fonts easily
_font_vga_1_1=${FONT_VGA9X16}
_font_vga_0_1=${FONT_VGA8X16}
_font_vgaw_1_1=${FONT_VGA9X8}
_font_vgaw_0_1=${FONT_VGA8X8}
_font_ega_1_1=${FONT_EGA9X14}
_font_ega_0_1=${FONT_EGA8X14}
_font_egaw_1_1=${FONT_EGA9X8}
_font_egaw_0_1=${FONT_EGA8X8}
_font_vga_1_0=${FONT_AC_VGA9X16}
_font_vga_0_0=${FONT_AC_VGA8X16}
_font_vgaw_1_0=${FONT_AC_VGA9X8}
_font_vgaw_0_0=${FONT_AC_VGA8X8}
_font_ega_1_0=${FONT_AC_EGA9X14}
_font_ega_0_0=${FONT_AC_EGA8X14}
_font_egaw_1_0=${FONT_AC_EGA9X8}
_font_egaw_0_0=${FONT_AC_EGA8X8}

# validate dos2ansi works with given flags and input file
test -n "${D2A_ARGS}" && _d2a_args="${D2A_ARGS} ${_d2a_args}"
eval "${_dos2ansi} ${_d2a_args} ${_file} >/dev/null" || exit 1

# read SAUCE metadata
{
    read -r _f; eval s_title=${_f}
    read -r _f; eval s_author=${_f}
    read -r _f; eval s_group=${_f}
    read -r _f; eval s_width=${_f}
    read -r _f; eval s_height=${_f}
    read -r _f; eval s_spacing=${_f}
    read -r _f; eval s_aspect=${_f}
    read -r _f; eval s_font=${_f}
} <<SAUCE
$(${_dos2ansi} -q :TAGwhsaf "${_file}" 2>/dev/null)
SAUCE

# sanitize SAUCE metadata, construct full title and set defaults
test -z "${s_title}" && s_title="showansi: <Unnamed>"
if [ -n "${s_author}" ]; then
    s_title="${s_title} | by ${s_author}"
    test -n "${s_group}" && s_title="${s_title}/${s_group}"
fi
if ! is_integer ${s_width}; then
    _d2a_args="${_d2a_args} -w${_def_width}"
    s_width=${_def_width}
fi
is_integer ${s_height}	|| s_height=${_def_height}
is_integer ${s_spacing}	|| s_spacing=${_def_spacing}
is_integer ${s_aspect}	|| s_aspect=${_def_aspect}

# calculate terminal window geometry
_width=${s_width}
_height=$((${s_height} + ${ADDLINES}))
test ${_width} -gt ${MAXWIDTH} && _width=${MAXWIDTH}
test ${_width} -lt 20 && _width=20
test ${_height} -gt ${MAXHEIGHT} && _height=${MAXHEIGHT}
test ${_height} -lt $((${ADDLINES} + 2)) && _height=$((${ADDLINES} + 2))

# map metadata to font to use
case "${s_font}" in
    "IBM VGA")	    _fontbase=vga;;
    "IBM VGA50")    _fontbase=vgaw;;
    "IBM EGA")	    _fontbase=ega;;
    "IBM EGA43")    _fontbase=egaw;;
    *)		    _fontbase=${_def_fontbase};;
esac
_fontname=_font_${_fontbase}_${s_spacing}_${s_aspect}
eval _font=\${${_fontname}}

# construct commandline to execute
_dos2ansicmd="${_dos2ansi} ${_d2a_args} \"$_file\" | ${PAGER}"
test -n ${SETGEOM} && TERM_ARGS="${TERM_ARGS} ${SETGEOM} ${_width}x${_height}"
test -n ${SETFONT} && TERM_ARGS="${TERM_ARGS} ${SETFONT} '${_font}'"
test -n ${SETTITLE} && TERM_ARGS="${TERM_ARGS} ${SETTITLE} '${s_title}'"
TERM_ARGS="${TERM_ARGS} ${EXECUTE} '${_dos2ansicmd}'"

# debugging output
if [ -n "${SHOWANSI_DEBUG}" ]; then
    echo size: ${s_width}x${s_height}
    echo font: ${s_font}
    echo letter spacing: ${s_spacing}
    echo square pixels: ${s_aspect}
    echo
    echo Executing: ${TERMINAL} ${TERM_ARGS}
fi

# execute
eval exec ${TERMINAL} ${TERM_ARGS}
