#!%%SH%%
# vim: ft=sh:sts=4:sw=4
set -f

# Refuse to run as root.
# This doesn't reliably prevent running with privileges, but it's a start.
if command -v id >/dev/null 2>&1 && [ $(id -u) -eq 0 ]; then
    echo >&2 showansi will not run as root.
    exit 1
fi

# Check whether a variable is an integer.
# Return values are "exit codes" (0 means true).
# Accept non-emtpy strings containing only digits.
is_integer()
{
    case "${1#[+-]}" in
	*[!0123456789]*)    return 1;;
	'')		    return 1;;
	*)		    return 0;;
    esac
}

# Quote a string to remain uninterpreted by the shell
shquote()
{
    _unquoted="${1}"
    _quoted=""
    while [ -n "${_unquoted}" ]; do
	_char="$(printf %.1s "${_unquoted}")"
	_unquoted="${_unquoted#"${_char}"}"
	if [ "${_char}" = "'" ]; then
	    _quoted="${_quoted}'\\''"
	else
	    _quoted="${_quoted}${_char}"
	fi
    done
    printf "'%s'" "${_quoted}"
}

# Quote all backslashes in a string
escquote()
{
    _unquoted="${1}"
    _quoted=""
    while [ -n "${_unquoted}" ]; do
	_char="$(printf %.1s "${_unquoted}")"
	_unquoted="${_unquoted#"${_char}"}"
	test "${_char}" = '\' && _quoted="${_quoted}\\"
	_quoted="${_quoted}${_char}"
    done
    printf %s "${_quoted}"
}

# Exit handler to clean up temp dir
rmtmpdir()
{
    rm -fr "${_tmpdir}"
}

# Create a private temp dir and install handler to clean it.
# Prefer mktemp if available, fall back to constructing a name including
# our pid.
mktmpdir()
{
    trap rmtmpdir EXIT HUP INT TERM
    if command -v mktemp >/dev/null 2>&1; then
	_tmpdir="$(mktemp -d)"
    else
	_tmpdir="${TMPDIR:-/tmp}/tmp.showansi.$$"
	mkdir -m 700 "${_tmpdir}" >/dev/null 2>&1
    fi
}

# Version output
version()
{
    echo
    echo "This is showansi from dos2ansi v%%VERSION%%"
    echo
    echo "WWW:      https://github.com/Zirias/dos2ansi"
    echo "Author:   Felix Palmen <felix@palmen-it.de>"
    echo "License:  BSD 2-clause (all rights reserved)"
    echo
}

# Print usage message
usage()
{
    echo "Usage: showansi -V"
    echo "       showansi -h"
    echo "       showansi [-Sensw] [-c columns] [-d dos2ansi] [-r rows]"
    echo "                [--] [args ...]"
}

# Print help message
help()
{
    usage
    echo
    echo "         -V            Print version information and exit"
    echo "         -S            Ignore SAUCE and other metadata and use"
    echo "                       all defaults"
    echo "                       Also passes ignoring SAUCE to dos2ansi"
    echo "         -c columns    Default number of columns instead of 80"
    echo "                       Also passed to dos2ansi as the width when"
    echo "                       no width from metadata is available"
    echo "         -d dos2ansi   Run 'dos2ansi' instead of %%DOS2ANSI%%"
    echo "         -e            Use an EGA font by default instead of VGA"
    echo "         -h            Print this help and exit"
    echo "         -n            Disable letter spacing by default"
    echo "         -r rows       Default number of rows instead of 25"
    echo "         -s            Assume square pixels by default"
    echo "         -w            Use wide fonts (VGA50 or EGA43) by default"
    echo
    echo "         args          Arguments for dos2ansi, including the file"
    echo "                       to display, must be preceded by '--' if it"
    echo "                       contains flags (starting with '-')"
    echo "                       Run 'dos2ansi -h' for help"
    echo
}

# Print usage plus optional error and exit
err()
{
    usage >&2
    if [ -n "$1" ]; then
	echo >&2
	echo >&2 Error: $1
    fi
    exit 1
}

# Try to get an argument for a commandline flag
fetcharg()
{
    case "${_needarg}" in
	c*) is_integer "${1}" || err "Invalid number of columns"
	    _def_width="${1}"; _needarg="${_needarg#c}";;
	d*) _dos2ansi="${1}"; _needarg="${_needarg#d}";;
	r*) is_integer "${1}" || err "Invalid number of rows"
	    _def_height="${1}"; _needarg="${_needarg#r}";;
	*)  err "Unknown flag"
    esac
}

# Default settings before parsing commandline
_dos2ansi="%%DOS2ANSI%%"
_d2a_args=""
_def_width=80
_def_height=""
_def_spacing=1
_def_aspect=0
_def_fontbase=vga
_def_fontvariant=""
_file=""
_nosauce=0
_nometa=0
_noinput=0
_needarg=""
_exec=exec

# Parse commandline part one: showansi flags
while true; do
    case "${1}" in
	--) shift; break;;
	-*) _flags="${1#-}"
	    while true; do
		case "${_flags}" in
		    V*) version; exit 0;;
		    S*) _nosauce=1; _nometa=1; _flags="${_flags#S}";;
		    c*) _needarg="${_needarg}c"; _flags="${_flags#c}";;
		    d*) _needarg="${_needarg}d"; _flags="${_flags#d}";;
		    e*) _def_fontbase=ega; _flags="${_flags#e}";;
		    h*) help; exit 0;;
		    n*) _def_spacing=0; _flags="${_flags#n}";;
		    r*) _needarg="${_needarg}r"; _flags="${_flags#r}";;
		    s*) _def_aspect=1; _flags="${_flags#s}";;
		    w*) _def_fontvariant=w; _flags="${_flags#w}";;
		    '')	break;;
		    *) fetcharg "${_flags}"; break;;
		esac
	    done
	    shift;;
	*)  test -z "${_needarg}" && break
	    fetcharg "${1}"
	    shift;;
    esac
done

# Parse commandline part two: dos2ansi flags and optional input file
_d2a_endflags=0
while test -n "${1}"; do
    test "${1}" = "--" || _file="${1}"
    _d2a_args="${_d2a_args} $(shquote "${1}")"
    case "${1}" in
	--) _d2a_endflags=1;;
	-*T*) test ${_d2a_endflags} -eq 0 && _noinput=1 && _nosauce=1;;
	-*s*) test ${_d2a_endflags} -eq 0 && _nosauce=1;;
    esac
    shift
done
test -n "${_needarg}" && err "Missing arguments for given flags"
if [ ${_noinput} -eq 1 ]; then
    _file=""
fi

# Implied defaults
_imp_height=25
if [ "${_def_fontvariant}" = "w" ]; then
    test "${_def_fontbase}" = "vga" && _imp_height=50
    test "${_def_fontbase}" = "ega" && _imp_height=43
fi

# Default configuration values
TERMINAL=xterm
TERM_ARGS="-tn xterm-256color -fa '' -bg black -fg lightgray -sl 0"
D2A_ARGS=-X
MAXWIDTH=200
MAXHEIGHT=60
PAGER="less --mouse --wheel-lines 3 -~QRScPs"
ADDLINES=1
SETTITLE=!
SETGEOM=-geometry
SETFONT=-fn
EXECUTE=-e
SHELL=%%SH%%
FONT_VGA9X16=-ibm-vga-normal-r-normal--16-120-96-96-c-90-iso10646-1
FONT_VGA8X16=-ibm-vga-normal-r-normal--16-120-96-96-c-80-iso10646-1
FONT_VGA9X8=-ibm-vga-normal-r-expanded--16-120-96-96-c-180-iso10646-1
FONT_VGA8X8=-ibm-vga-normal-r-expanded--16-120-96-96-c-160-iso10646-1
FONT_EGA9X14=-ibm-ega-normal-r-normal--14-100-96-96-c-90-iso10646-1
FONT_EGA8X14=-ibm-ega-normal-r-normal--14-100-96-96-c-80-iso10646-1
FONT_EGA9X8=-ibm-ega-normal-r-expanded--14-100-96-96-c-180-iso10646-1
FONT_EGA8X8=-ibm-ega-normal-r-expanded--14-100-96-96-c-160-iso10646-1
FONT_AC_VGA9X16=-ibm-vga-normal-r-normal--16-120-96-96-c-90-iso10646-1
FONT_AC_VGA8X16=-ibm-vga-normal-r-normal--16-120-96-96-c-80-iso10646-1
FONT_AC_VGA9X8=-ibm-vga-normal-r-expanded--16-120-96-96-c-180-iso10646-1
FONT_AC_VGA8X8=-ibm-vga-normal-r-expanded--16-120-96-96-c-160-iso10646-1
FONT_AC_EGA9X14=-ibm-ega-normal-r-normal--14-100-96-96-c-90-iso10646-1
FONT_AC_EGA8X14=-ibm-ega-normal-r-normal--14-100-96-96-c-80-iso10646-1
FONT_AC_EGA9X8=-ibm-ega-normal-r-expanded--14-100-96-96-c-180-iso10646-1
FONT_AC_EGA8X8=-ibm-ega-normal-r-expanded--14-100-96-96-c-160-iso10646-1
USERRC=

# Read system-wide configuration
test -r "%%SYSCONFDIR%%/showansirc" && . "%%SYSCONFDIR%%/showansirc"

# Read per-user configuration (if enabled in system-wide configuration)
test -n "${USERRC}" && test -r "${USERRC}" && . "${USERRC}"

# Sanitize numeric values
is_integer "${MAXWIDTH}"    || MAXWIDTH=200
is_integer "${MAXHEIGHT}"   || MAXHEIGHT=60
is_integer "${ADDLINES}"    || ADDLINES=1

# Prepend dos2ansi flags from configuration
test -n "${D2A_ARGS}" && _d2a_args="${D2A_ARGS} ${_d2a_args}"

# Create "mapping table" to map SAUCE metadata to fonts and per font
# max window height easily
_font_vga_1_1=${FONT_VGA9X16}
_font_vga_0_1=${FONT_VGA8X16}
_font_vgaw_1_1=${FONT_VGA9X8}
_font_vgaw_0_1=${FONT_VGA8X8}
_font_ega_1_1=${FONT_EGA9X14}
_font_ega_0_1=${FONT_EGA8X14}
_font_egaw_1_1=${FONT_EGA9X8}
_font_egaw_0_1=${FONT_EGA8X8}
_font_vga_1_0=${FONT_AC_VGA9X16}
_font_vga_0_0=${FONT_AC_VGA8X16}
_font_vgaw_1_0=${FONT_AC_VGA9X8}
_font_vgaw_0_0=${FONT_AC_VGA8X8}
_font_ega_1_0=${FONT_AC_EGA9X14}
_font_ega_0_0=${FONT_AC_EGA8X14}
_font_egaw_1_0=${FONT_AC_EGA9X8}
_font_egaw_0_0=${FONT_AC_EGA8X8}
_height_vga_1_1=${MAXHEIGHT_VGA9X16}
_height_vga_0_1=${MAXHEIGHT_VGA8X16}
_height_vgaw_1_1=${MAXHEIGHT_VGA9X8}
_height_vgaw_0_1=${MAXHEIGHT_VGA8X8}
_height_ega_1_1=${MAXHEIGHT_EGA9X14}
_height_ega_0_1=${MAXHEIGHT_EGA8X14}
_height_egaw_1_1=${MAXHEIGHT_EGA9X8}
_height_egaw_0_1=${MAXHEIGHT_EGA8X8}
_height_vga_1_0=${MAXHEIGHT_AC_VGA9X16}
_height_vga_0_0=${MAXHEIGHT_AC_VGA8X16}
_height_vgaw_1_0=${MAXHEIGHT_AC_VGA9X8}
_height_vgaw_0_0=${MAXHEIGHT_AC_VGA8X8}
_height_ega_1_0=${MAXHEIGHT_AC_EGA9X14}
_height_ega_0_0=${MAXHEIGHT_AC_EGA8X14}
_height_egaw_1_0=${MAXHEIGHT_AC_EGA9X8}
_height_egaw_0_0=${MAXHEIGHT_AC_EGA8X8}

# Validate dos2ansi works with given flags, try to feed stdin if input is
# missing and collect medatada.
m_setwidth=""
m_setheight=""
m_resetwidth=""
m_resetheight=""
m_height=""
if ! _d2a_stderr=$(eval \
    "${_dos2ansi} -m ${_d2a_args} </dev/null 2>&1 >/dev/null"); then
    # When dos2ansi fails for missing input with -m, there will be no
    # output. So, error out if there *is* output.
    if [ -n "${_d2a_stderr}" ]; then
	printf >&2 "${_d2a_stderr}\n"
	exit 1;
    fi
    # Otherwise retry after capturing stdin to a temporary file.
    if ! mktmpdir; then
	echo >&2 "Error creating temporary directory"
	test -n "${TMPDIR}" && echo >&2 "Check TMPDIR variable."
	exit 1
    fi
    _file="${_tmpdir}/dosinput"
    cat >"${_file}"
    _d2a_args="${_d2a_args} $(shquote "${_file}")"
    _exec=""
    if ! _d2a_stderr=$(eval "${_dos2ansi} -m ${_d2a_args} 2>&1 >/dev/null");
    then
	echo >&2 "No input found."
	exit 1
    fi
fi
if [ ${_nometa} -eq 0 ]; then
    while read -r _m; do eval ${_m}; done <<META
${_d2a_stderr}
META
fi

# Read SAUCE metadata
if [ ${_noinput} -eq 0 ]; then {
    read -r _f; eval s_title=${_f}
    read -r _f; eval s_author=${_f}
    read -r _f; eval s_group=${_f}
    read -r _f; eval s_width=${_f}
    read -r _f; eval s_height=${_f}
    read -r _f; eval s_spacing=${_f}
    read -r _f; eval s_aspect=${_f}
    read -r _f; eval s_font=${_f}
} <<SAUCE
$(${_dos2ansi} -q :TAGwhsaf "${_file}" 2>/dev/null)
SAUCE
fi
if [ ${_nosauce} -eq 1 ]; then
    if [ ${_noinput} -eq 1 ]; then
	s_title="dos2ansi test mode"
	s_author=""
	s_group=""
    fi
    s_width=""
    s_height=""
    s_spacing=""
    s_aspect=""
    s_font=""
    _d2a_args="-S ${_d2a_args}"
fi

# Sanitize SAUCE metadata, construct full title and set defaults
test -z "${s_title}" && s_title="showansi: <Unnamed>"
if [ -n "${s_author}" ]; then
    s_title="${s_title} | by ${s_author}"
    test -n "${s_group}" && s_title="${s_title}/${s_group}"
fi
is_integer ${s_spacing}	|| s_spacing=${_def_spacing}
is_integer ${s_aspect}	|| s_aspect=${_def_aspect}

# Map metadata to font to use and optional max height
case "${s_font}" in
    "IBM VGA")	    _fontbase=vga;;
    "IBM VGA50")    _fontbase=vgaw;;
    "IBM EGA")	    _fontbase=ega;;
    "IBM EGA43")    _fontbase=egaw;;
    *)
	_fontbase=${_def_fontbase}${_def_fontvariant}
	if [ ${_nometa} -eq 0 ]; then
	    if is_integer ${m_resetheight}; then
		if ${m_resetheight} -eq 25; then
		    if is_integer ${m_resetwidth} && ${m_resetwidth} -eq 40
		    then _fontbase=vgaw; else _fontbase=vga; fi
		fi
	    elif is_integer ${m_height}; then
		test ${m_height} -eq 43 && _fontbase=egaw
		test ${m_height} -eq 50 && _fontbase=vgaw
	    fi
	fi
	;;
esac
_fontname=${_fontbase}_${s_spacing}_${s_aspect}
eval _font=\${_font_${_fontname}}
eval _maxheight=\${_height_${_fontname}}
is_integer "${_maxheight}" || _maxheight=${MAXHEIGHT}

# Calculate terminal window geometry
_width=${s_width}
is_integer ${_width} || _width=${m_resetwidth}
if ! is_integer ${_width}; then
    _d2a_args="-w${_def_width} ${_d2a_args}"
    _width=${_def_width}
fi
_height=${s_height}
is_integer ${_height}	|| _height=${_def_height}
is_integer ${_height}	|| _height=${m_height}
is_integer ${_height}	|| _height=${_imp_height}
_height=$((${_height} + ${ADDLINES}))
test ${_width} -gt ${MAXWIDTH} && _width=${MAXWIDTH}
test ${_width} -lt 20 && _width=20
test ${_height} -gt ${_maxheight} && _height=${_maxheight}
test ${_height} -lt $((${ADDLINES} + 2)) && _height=$((${ADDLINES} + 2))

# Construct commandline to execute
_dos2ansiesc=""
_dos2ansicmd="${_dos2ansi} ${_d2a_args} | ${PAGER}"
if [ "${SETGEOM}" = "!" ]; then
    _dos2ansiesc="${_dos2ansiesc}\\033[8;${_height};${_width}t"
    SETGEOM=""
fi
test -n "${SETGEOM}" && \
    TERM_ARGS="${TERM_ARGS} $(shquote "${SETGEOM}") ${_width}x${_height}"
test -n "${SETFONT}" && \
    TERM_ARGS="${TERM_ARGS} $(shquote "${SETFONT}") $(shquote "${_font}")"
if [ "${SETTITLE}" = "!" ]; then
    _dos2ansiesc="${_dos2ansiesc}\\033]0;$(escquote "${s_title}")\\07"
    SETTITLE=""
fi
test -n "${SETTITLE}" && \
    TERM_ARGS="${TERM_ARGS} $(shquote "${SETTITLE}") $(shquote "${s_title}")"
test -n "${_dos2ansiesc}" && \
    _dos2ansicmd="printf %b $(shquote "${_dos2ansiesc}"); ${_dos2ansicmd}"
TERM_ARGS="${TERM_ARGS} $(shquote "${EXECUTE}") $(shquote "${_dos2ansicmd}")"

# Debugging output
if [ -n "${SHOWANSI_DEBUG}" ]; then
    is_integer ${m_resetwidth} && m_setwidth=${m_resetwidth}
    is_integer ${m_resetheight} && m_setheight=${m_resetheight}
    is_integer ${m_setwidth} || m_setwidth=${_def_width}
    is_integer ${m_setheight} || m_setheight=${_def_height}
    is_integer ${s_width} && echo SAUCE size: ${s_width}x${s_height}
    echo screen size: ${m_setwidth}x${m_setheight}
    is_integer ${m_height} && echo canvas size: ${m_setwidth}x${m_height}
    echo font: ${s_font}
    echo letter spacing: ${s_spacing}
    echo square pixels: ${s_aspect}
    echo
    echo Executing: ${TERMINAL} ${TERM_ARGS}
fi

# Execute
export SHELL
unset LESS
eval ${_exec} ${TERMINAL} ${TERM_ARGS}
